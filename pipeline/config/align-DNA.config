includeConfig "${projectDir}/config/_pipeline.config"

params {
    // sample inputs
    sample_name = "name_of_sample_with_no_spaces"
    input_csv = "path/to/input/csv/"
    reference_fasta = "/path/to/fasta/genome.fa"
    reference_fasta_dict = "/path/to/fasta/dict/genome.dict"
    reference_fasta_index_files = "/path/to/fasta/index/files/genome.fa.*"
    
    // This is only used when `params.blcds_registered_dataset` is set to true
    // TODO: should add a validation for genome versions
    reference_genome_version = "genome_version"

    // input/output locations
    output_dir = "where/to/save/outputs/"
    temp_dir = "/local/disk/for/temp/file/dir/"

    // options
    save_intermediate_files = false
    cache_intermediate_pipeline_steps = false

    // resource configuraton for entire pipeline
    max_number_of_parallel_jobs = 1

    // uncomment to manually set ncpus for bwa-mem2
    // bwa_mem_number_of_cpus = 60

    // set to true if the data input fastq files are registered in the Boutros Lab.
    blcds_registered_dataset_input = false
    // set to true to redirect output files directly to the Boutros Lab data storage.
    blcds_registered_dataset_output = false

    // uncooment the following in order to save output bam and log directly to blcds data storage
    // blcds_cluster_slurm = true
    // blcds_disease_id = "disease_id"
    // blcds_dataset_id = "dataset_id"
    // blcds_patient_id = "patient_id"
    // blcds_sample_id  = "sample_id"
}

// set output diraction and filenames for bam and log files.
methods.set_bam_and_log_output()

// location of Nextflow temp directories  
workDir = params.temp_dir
NXF_WORK = params.temp_dir
NXF_TEMP = params.temp_dir
NXF_HOME = params.temp_dir

process {
    // monitor process jobs with local (not slurm) executor
    executor = "local"

    // total amount of resources avaible to the pipeline
    maxForks = params.max_number_of_parallel_jobs

    // echo stdout of each step to stdout of pipeline
    echo = true
    cache = params.cache_intermediate_pipeline_steps
}

docker {
    enabled = true
}

// pipeline monitoring and metric files
timeline {
    enabled = true
    file = "${params.log_output_dir}/timeline.html"
}

trace {
    enabled = true
    file = "${params.log_output_dir}/trace.txt"
}

report {
    enabled = true
    file = "${params.log_output_dir}/report.html"
}
